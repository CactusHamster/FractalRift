use beryllium::{
    events,
    init::InitFlags,
    video::{self, GlSwapInterval::Vsync},
    Sdl,
};
use fermium::{keycode::SDLK_ESCAPE, prelude::{SDLK_s, SDLK_a, SDLK_d, SDLK_w}};
use gl33::{
    self, GLenum, GL_ARRAY_BUFFER, GL_COMPILE_STATUS, GL_FLOAT, GL_FRAGMENT_SHADER, GL_LINK_STATUS,
    GL_STATIC_DRAW, GL_TRIANGLES, GL_VERTEX_SHADER, GL_ELEMENT_ARRAY_BUFFER, GL_UNSIGNED_INT, GlFns
};
use std::{mem::size_of, time::Duration, ffi::CString};

// Avoid console by default.
// #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

type Vertex = [f32; 3]; // Vertex = 3 f32's (x, y, z)
type TriIndexes = [u32; 3]; // // List of triangle indices = 3 vertex indices.

// Define vertices in NDC format.
const VERTICES: [Vertex; 4] = [
    [1.0, 1.0, 0.0],
    [1.0, -1.0, 0.0],
    [-1.0, -1.0, 0.0],
    [-1.0, 1.0, 0.0]
];
// Define which vertices make triangles.
const INDICES: [TriIndexes; 2] = [
    [0, 1, 3],
    [1, 2, 3]
];

const WIDTH: u32 = 600;
const HEIGHT: u32 = 800;
const MOVE_SPEED: f32 = 0.1;

// Define shader code.
const VERTEX_SHADER_CODE: &str = include_str!("vert.glsl");
const FRAGMENT_SHADER_CODE: &str = include_str!("frag.glsl");

unsafe fn load_shader(gl: &gl33::GlFns, method: GLenum, code: &str) -> u32 {
    // Create shader and save it to integer.
    let shader = gl.CreateShader(method);
    assert_ne!(shader, 0);

    // Load the shader code.
    gl.ShaderSource(
        shader,
        1,
        &(code.as_bytes().as_ptr().cast()),
        &(code.len().try_into().unwrap()),
    );

    // Compile the shader.
    gl.CompileShader(shader);

    // Check compilation success.
    let mut success = 0;
    gl.GetShaderiv(shader, GL_COMPILE_STATUS, &mut success);

    // Log compilation errors.
    if success == 0 {
        let mut v: Vec<u8> = Vec::with_capacity(1024);
        let mut log_len = 0_i32;
        gl.GetShaderInfoLog(shader, 1024, &mut log_len, v.as_mut_ptr().cast());
        v.set_len(log_len.try_into().unwrap());
        panic!("Compile Error: {}", String::from_utf8_lossy(&v));
    }
    return shader;
}

unsafe fn make_program(gl: &gl33::GlFns, vert: u32, frag: u32) -> u32 {
    // Make+link a shader program.
    let program = gl.CreateProgram();
    gl.AttachShader(program, vert);
    gl.AttachShader(program, frag);
    gl.LinkProgram(program);

    // Check success of linking.
    let mut success = 0;
    gl.GetProgramiv(program, GL_LINK_STATUS, &mut success);

    // Figure out what went wrong in case of failure. :(
    if success == 0 {
        let mut v: Vec<u8> = Vec::with_capacity(1024);
        let mut log_len: i32 = 0;
        gl.GetProgramInfoLog(program, 1024, &mut log_len, v.as_mut_ptr().cast());
        v.set_len(log_len.try_into().unwrap());
        panic!("Program Link Error: {}", String::from_utf8_lossy(&v));
    }

    // "Delete" shaders (they don't actually get deleted until they're detached.)
    gl.DeleteShader(vert);
    gl.DeleteShader(frag);
    gl.UseProgram(program);

    return program;
}

unsafe fn uniform_location (gl: &GlFns, program: u32, name: &str) -> i32{
    let cstr = CString::new(name).unwrap();
    let ptr = cstr.as_ptr();
    return gl.GetUniformLocation(program, ptr as *const u8);
}

unsafe fn render (gl: &GlFns) {
    // Clear the screen.
    // gl.Clear(gl33::GL_COLOR_BUFFER_BIT);

    // Draw vertices.
    // gl.DrawArrays(GL_TRIANGLES, 0, 3); // Draw plain vertices.
    gl.DrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0 as *const _); // Draw triangles from vertices and triangle indices.
}

fn main() {
    use std::mem::size_of_val;
    use std::thread::sleep;

    // Create SDL.
    let sdl = Sdl::init(InitFlags::EVERYTHING);
    sdl.set_gl_context_major_version(3).unwrap();
    #[cfg(target_os = "macos")]
    {
        sdl.set_gl_profile(video::GlContextFlags::FORWARD_COMPATIBLE)
            .unwrap();
    }

    // Setup window.
    let args = video::CreateWinArgs {
        title: "STAR",
        width: 800,
        height: 600,
        allow_high_dpi: true,
        borderless: false,
        resizable: true,
    };

    // Create a SDL window for GL.
    let win = sdl
        .create_gl_window(args)
        .expect("Failed to create window.");

    // Enable VSync on the window.
    win.set_swap_interval(Vsync).expect("Failed to set VSync.");

    // Create GL. Load OpenGL Functions.
    let gl: gl33::GlFns;
    unsafe {
        gl = gl33::GlFns::load_from(&|p| win.get_proc_address(p) as _)
            .expect("Failed to load OpenGL functions.");
    };
    unsafe {
        // Generate/Bind Vertex Array Object.
        // Binding one allows Buffering/Describing data.
        // We'll use it to conver the vertices to shader inputs.
        let mut vertex_array = 0;
        gl.GenVertexArrays(1, &mut vertex_array); // Generate 1 vertex array.
        assert_ne!(vertex_array, 0); // Should never happen.
        gl.BindVertexArray(vertex_array); // Bind now-active vertex array to context.

        // Generate/Bind Vertex Buffer Object to GL_ARRAY_BUFFER.
        let mut vertex_buffer = 0;
        gl.GenBuffers(1, &mut vertex_buffer); // Generate 1 vertex buffer.
        assert_ne!(vertex_buffer, 0); // Should never happen.

        // Bind vertex buffer to GL_ARRAY_BUFFER target of context.
        // All commands targeting  GL_ARRAY_BUFFER will now use vertex_buffer.
        gl.BindBuffer(GL_ARRAY_BUFFER, vertex_buffer);

        // Send the vertex data to the vertex buffer.
        gl.BufferData(
            GL_ARRAY_BUFFER,
            // Size of data in bytes.
            size_of_val(&VERTICES) as isize,
            // Pointer to vertices.
            VERTICES.as_ptr().cast(),
            // We'll use memory that's quick for GPU to access, slow for CPU to access.
            // It gets sent to GPU once, and used to draw many times.
            GL_STATIC_DRAW,
        );

        // Send the triangle indices to the context.
        let mut element_buffer = 0;
        gl.GenBuffers(1, &mut element_buffer);
        gl.BindBuffer(GL_ELEMENT_ARRAY_BUFFER, element_buffer);
        gl.BufferData(
            GL_ELEMENT_ARRAY_BUFFER as GLenum,
            (INDICES.len() * size_of::<TriIndexes>()) as isize,
            INDICES.as_ptr() as *const _,
            GL_STATIC_DRAW,
        );



        // "layout (location = 0)" in vertex shader.
        gl.EnableVertexAttribArray(0);
        // Add an attribute to vertices.
        gl.VertexAttribPointer(
            // Attribute described. Must match shader. ("layout (location = 0)")
            0,
            // Each coordinate is 3d. So we need 3 numbers to store it.
            3,
            // Each coordinate component is a f32.
            GL_FLOAT,
            // normalized (int->float conversion)
            0,
            // Bytes from start of attr to start of next attr.
            // attr is 3 f32's... so this is 3*sizeof(f32)
            // sizeof(Vertex) can work too.
            3 * size_of::<f32>() as i32,
            // Pointer to start of the attribute within buffer, with buffer starting at 0.
            // We'll put this one at 0 since it's the first attribute.
            0 as *const _,
        );

        // Unbind vertex buffer object. We don't need it anymore.
        gl.BindBuffer(GL_ARRAY_BUFFER, 0);

        // Set the clear color.
        gl.ClearColor(0.2, 0.8, 0.3, 1.0);
    }

    // Create a program from shaders.
    let program = unsafe {
        // Load shaders.
        let vertshader = load_shader(&gl, GL_VERTEX_SHADER, VERTEX_SHADER_CODE); // vertex
        let fragshader = load_shader(&gl, GL_FRAGMENT_SHADER, FRAGMENT_SHADER_CODE); // fragment
        make_program(&gl, vertshader, fragshader)
    };

    // Precalculate sleep duration.
    let d: Duration = Duration::new(0, 20000000);

    // Variables to change the size/center of the render.
    let mut size: [u32; 2] = [WIDTH, HEIGHT];
    let mut center: [f32; 2] = [0.0, 0.0];
    unsafe fn pass_size (gl: &GlFns, program: u32, size: &[u32; 2]) {
        let location = uniform_location(gl, program, "size");
        gl.Uniform2f(location, size[0] as f32, size[1] as f32);
    }
    unsafe fn pass_center (gl: &GlFns, program: u32, center: &[f32; 2]) {
        let location = uniform_location(gl, program, "center");
        gl.Uniform2f(location, center[0], center[1]);
    }

    // Send the size and center to OpenGL.
    unsafe { pass_size(&gl, program, &size); };
    unsafe { pass_center(&gl, program, &center); }

    // Main loop.
    let mut rerender = true;
    'main_loop: loop {
        // Handle events this frame.
        while let Some(event) = sdl.poll_events() {
            match event {
                (events::Event::Quit, _) => break 'main_loop,
                (events::Event::Key { win_id: _, pressed: _, repeat: _, scancode:_, keycode, modifiers: _ }, _) => {
                    if keycode == SDLK_ESCAPE { break 'main_loop }
                    else if keycode == SDLK_w {
                        center[1] += MOVE_SPEED;
                        unsafe { pass_center(&gl, program, &center); }
                        rerender = true;
                    }
                    else if keycode == SDLK_s {
                        center[1] -= MOVE_SPEED;
                        unsafe { pass_center(&gl, program, &center); }
                        rerender = true;
                    }
                    else if keycode == SDLK_a {
                        center[0] -= MOVE_SPEED;
                        unsafe { pass_center(&gl, program, &center); }
                        rerender = true;
                    }
                    else if keycode == SDLK_d {
                        center[0] += MOVE_SPEED;
                        unsafe { pass_center(&gl, program, &center); }
                        rerender = true;
                    }
                },
                (events::Event::WindowResized { win_id: _, width, height }, _) => {
                    unsafe {
                        size[0] = width as u32;
                        size[1] = height as u32;
                        gl.Viewport(0, 0, width, height);
                        pass_size(&gl, program, &size);
                    };
                    
                    rerender = true;
                },
                _ => (),
            }
        }

        // Only rerender if necessary.
        if rerender == true {
            //println!("{:?}", center);
            rerender = false;
            unsafe { render(&gl); };
            // Display graphics buffer.
            win.swap_window();
        };
        sleep(d);
    }
}